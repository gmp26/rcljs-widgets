(ns alg.binom)

(def PI2 6.283185307179586476925286)
(def S0 0.083333333333333333333)                            ; 1/12 
(def S1 0.00277777777777777777778)                          ; 1/360
(def S2 0.00079365079365079365079365)                       ; 1/1260
(def S3 0.000595238095238095238095238)                      ; 1/1680
(def S4 0.0008417508417508417508417508)                     ; 1/1188
(def sfe [0 0.081061466795327258219670264
          0.041340695955409294093822081 0.0276779256849983391487892927
          0.020790672103765093111522771 0.0166446911898211921631948653
          0.013876128823070747998745727 0.0118967099458917700950557241
          0.010411265261972096497478567 0.0092554621827127329177286366
          0.008330563433362871256469318 0.0075736754879518407949720242
          0.006942840107209529865664152 0.0064089941880042070684396310
          0.005951370112758847735624416 0.0055547335519628013710386899])


;;;
;; stirlerr(n) = log(n!) - log( sqrt(2*pi*n)*(n/e)^n ) */
;;;
(defn stirlerr [n]
  (if (< n 16)
    (sfe (int n))
    (let [nn (* n n)]
      (cond
        (> n 500) (/ (- S0 (/ S1 nn)) n)
        (> n 80) (/ (- S0 (/ (- S1 (/ S2 nn)) nn)) n)
        (> n 35) (/ (- S0 (/ (- S1 (/ (- S2 (/ S3 nn)) nn)) nn)) n)
        :else (/ (- S0 (- S1 (/ (- S2 (/ (- S3 (/ S4 nn)) nn)) nn)) nn) n)))))

(defn fabs [r]
  (if (pos? r) r (- r)))

;;;
;; Evaluate the deviance term
;; bd0(x,np) = x log(x/np) + np - x
;;;
;(defn bd0 [x np]
;  (if (< (fabs (- x np)) (* 0.1 (+ x np))))
;  {s = (x-np) * (x-np) / (x+np)                             ;
;   v = (x-np) / (x+np)                                      ;
;   ej = 2*x*v                                               ;
;   for (j=1; ;j++)
;         {
;          ej *= v*v                                         ;
;             s1 = s+ej /) (2*j+1)                           ;
;   if (s1==s) return (s1)                                   ;
;   s = s1                                                   ;
;   }
;
;  return(x*log(x/np)+np-x);
;}
